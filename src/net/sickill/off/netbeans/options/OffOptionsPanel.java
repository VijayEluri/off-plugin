/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sickill.off.netbeans.options;

import net.sickill.off.Settings;
import net.sickill.off.netbeans.NetbeansSettings;

final class OffOptionsPanel extends javax.swing.JPanel {

    private final OffOptionsPanelController controller;

    OffOptionsPanel(OffOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    // TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        smartMatch = new javax.swing.JRadioButton();
        normalMatch = new javax.swing.JRadioButton();
        minPatternLength = new javax.swing.JSpinner();
        matchFromStart = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        searchDelay = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        ignoreMask = new javax.swing.JTextField();
        clearOnOpen = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Matching mode:");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Minimum pattern length:");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, "Start searching");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, "Hide files matching following regular expresions:");

        buttonGroup1.add(smartMatch);
        org.openide.awt.Mnemonics.setLocalizedText(smartMatch, "smart");

        buttonGroup1.add(normalMatch);
        org.openide.awt.Mnemonics.setLocalizedText(normalMatch, "normal");

        minPatternLength.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        org.openide.awt.Mnemonics.setLocalizedText(matchFromStart, "Match patterns from start of filename");

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "characters");

        searchDelay.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, "second after last keystroke");

        org.openide.awt.Mnemonics.setLocalizedText(clearOnOpen, "Clear search pattern on dialog open");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(clearOnOpen)
                    .add(matchFromStart)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(smartMatch)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(normalMatch))
                    .add(layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ignoreMask, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 320, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(searchDelay))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(minPatternLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel3))
                            .add(jLabel6))))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(smartMatch)
                    .add(jLabel1)
                    .add(normalMatch))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(minPatternLength, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(searchDelay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(ignoreMask, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(matchFromStart)
                .add(18, 18, 18)
                .add(clearOnOpen)
                .addContainerGap(261, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(TazPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(TazPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        Settings s = NetbeansSettings.getInstance();
        if (s.isSmartMatch()) {
            smartMatch.setSelected(true);
        } else {
            normalMatch.setSelected(true);
        }
        minPatternLength.setValue(s.getMinPatternLength());
        searchDelay.setValue(s.getSearchDelay());
        ignoreMask.setText(s.getIgnoreMask().toString());
        matchFromStart.setSelected(s.isMatchFromStart());
        clearOnOpen.setSelected(s.isClearOnOpen());
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(TazPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(TazPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        Settings s = NetbeansSettings.getInstance();
        s.setSmartMatch(smartMatch.isSelected());
        s.setMinPatternLength((Integer)minPatternLength.getValue());
        s.setSearchDelay((Float)searchDelay.getValue());
        s.setIgnoreMask(ignoreMask.getText());
        s.setMatchFromStart(matchFromStart.isSelected());
        s.setClearOnOpen(clearOnOpen.isSelected());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox clearOnOpen;
    private javax.swing.JTextField ignoreMask;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JCheckBox matchFromStart;
    private javax.swing.JSpinner minPatternLength;
    private javax.swing.JRadioButton normalMatch;
    private javax.swing.JSpinner searchDelay;
    private javax.swing.JRadioButton smartMatch;
    // End of variables declaration//GEN-END:variables
}
